# Filename: CMakeLists-Custom.txt
# Description: Skeleton example to be used for custom 3rd party library
#   you want to include in your project. Copy this skeleton directory and
#   rename it. Rename this file as CMakeLists.txt and adjust the custom steps
#   below as needed.
# Modification Log:
# 2012-01-03 Initial version
#

# Define the GetSkeleton project
project(GetSkeleton)

# Create a list of libraries to build
set(GET_skeleton_BUILD_DEPS ${PROJECT_BINARY_DIR}/skeleton-mkdir)
list(APPEND GET_skeleton_BUILD_DEPS ${PROJECT_BINARY_DIR}/skeleton-download)
if(BUILD_skeleton_DEBUG_SHARED)
  list(APPEND GET_skeleton_BUILD_DEPS ${PROJECT_BINARY_DIR}/skeleton-debug-shared)
endif(BUILD_skeleton_DEBUG_SHARED)
if(BUILD_skeleton_DEBUG_STATIC)
  list(APPEND GET_skeleton_BUILD_DEPS ${PROJECT_BINARY_DIR}/skeleton-debug-static)
endif(BUILD_skeleton_DEBUG_STATIC)
if(BUILD_skeleton_RELEASE_SHARED)
  list(APPEND GET_skeleton_BUILD_DEPS ${PROJECT_BINARY_DIR}/skeleton-release-shared)
endif(BUILD_skeleton_RELEASE_SHARED)
if(BUILD_skeleton_RELEASE_STATIC)
  list(APPEND GET_skeleton_BUILD_DEPS ${PROJECT_BINARY_DIR}/skeleton-release-static)
endif(BUILD_skeleton_RELEASE_STATIC)

# Define CMake arguments for building debug and release static and shared
# libraries
set(GET_skeleton_DEBUG_SHARED
  -DBUILD_SHARED_LIBS:BOOL=TRUE
  -DCMAKE_BUILD_TYPE:STRING=Debug
  -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}
  -G${CMAKE_GENERATOR}
  ${PROJECT_BINARY_DIR}/skeleton)
set(BUILD_skeleton_DEBUG_SHARED
  --build ${PROJECT_BINARY_DIR}/debug-shared
  --config ${CMAKE_CFG_INTDIR})
set(GET_skeleton_DEBUG_STATIC
  -DBUILD_SHARED_LIBS:BOOL=FALSE
  -DCMAKE_BUILD_TYPE:STRING=Debug
  -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}
  -G${CMAKE_GENERATOR}
  ${PROJECT_BINARY_DIR}/skeleton)
set(BUILD_skeleton_DEBUG_STATIC
  --build ${PROJECT_BINARY_DIR}/debug-static
  --config ${CMAKE_CFG_INTDIR})
set(GET_skeleton_RELEASE_SHARED
  -DBUILD_SHARED_LIBS:BOOL=TRUE
  -DCMAKE_BUILD_TYPE:STRING=Release
  -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}
  -G${CMAKE_GENERATOR}
  ${PROJECT_BINARY_DIR}/skeleton)
set(BUILD_skeleton_RELEASE_SHARED
  --build ${PROJECT_BINARY_DIR}/release-shared
  --config ${CMAKE_CFG_INTDIR})
set(GET_skeleton_RELEASE_STATIC
  -DBUILD_SHARED_LIBS:BOOL=FALSE
  -DCMAKE_BUILD_TYPE:STRING=Release
  -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}
  -G${CMAKE_GENERATOR}
  ${PROJECT_BINARY_DIR}/skeleton)
set(BUILD_skeleton_RELEASE_STATIC
  --build ${PROJECT_BINARY_DIR}/release-static
  --config ${CMAKE_CFG_INTDIR})
set(COPY_BIN
    -E copy_directory
    ${PROJECT_BINARY_DIR}/bin
    ${CMAKE_BINARY_DIR}/bin)
set(COPY_LIB
    -E copy_directory
    ${PROJECT_BINARY_DIR}/lib
    ${CMAKE_BINARY_DIR}/lib)
set(COPY_INCLUDE
    -E copy_directory
    ${PROJECT_BINARY_DIR}/include
    ${CMAKE_BINARY_DIR}/include)
set(COPY_DOC
    -E copy_directory
    ${PROJECT_BINARY_DIR}/doc/html
    ${CMAKE_BINARY_DIR}/doc/skeleton)

# Find Git and verify version is > 1.6.5
find_package(Git)
if(NOT GIT_EXECUTABLE)
  message(FATAL_ERROR "error: could not find git for clone of skeleton")
else()
  execute_process(
	  COMMAND "${GIT_EXECUTABLE}" --version
    OUTPUT_VARIABLE ov
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  string(REGEX REPLACE "^git version (.+)$" "\\1" GIT_VERSION "${ov}")
  if(GIT_VERSION VERSION_LESS 1.6.5)
    message(FATAL_ERROR "error: git version 1.6.5 or later required for 'git submodule update --recursive': git_version='${GIT_VERSION}'")
  endif()
endif()

# Add Getskeleton custom target
add_custom_target(Getskeleton ALL DEPENDS ${PROJECT_BINARY_DIR}/skeleton-complete)

# Add our target to the list of dependencies for 3rdparty
set(EXTERNAL_DEPS ${EXTERNAL_DEPS} Getskeleton PARENT_SCOPE)

# Setup GIT repository information
set(repository "https://github.com/LaurentGomila/skeleton.git")
set(module)
set(tag "master")
configure_file(
  "${CMAKE_ROOT}/Modules/RepositoryInfo.txt.in"
  "${PROJECT_BINARY_DIR}/skeleton-gitinfo.txt"
  @ONLY)

# Add the complete step first that depends on all the other steps
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/skeleton-complete
  COMMENT "Completed 'skeleton'"
  COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/skeleton-complete
  COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/skeleton-done
  DEPENDS ${GET_skeleton_BUILD_DEPS}
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-install
  VERBATIM)

# Create GIT Clone cmake script
file(WRITE ${PROJECT_BINARY_DIR}/skeleton-gitclone.cmake "
if(NOT EXISTS \"${PROJECT_BINARY_DIR}/skeleton\")
  execute_process(
    COMMAND \"${CMAKE_COMMAND}\" -E make_directory \"${PROJECT_BINARY_DIR}/skeleton\"
    COMMAND \"${GIT_EXECUTABLE}\" clone \"${repository}\" \"${PROJECT_BINARY_DIR}/skeleton\"
    WORKING_DIRECTORY \"${PROJECT_BINARY_DIR}\"
    RESULT_VARIABLE error_code)
  if(error_code)
    message(FATAL_ERROR \"Failed to clone repository: '${repository}'\")
  endif()
endif()

execute_process(
  COMMAND \"${GIT_EXECUTABLE}\" checkout ${tag}
  WORKING_DIRECTORY \"${PROJECT_BINARY_DIR}/skeleton\"
  RESULT_VARIABLE error_code)
if(error_code)
  message(FATAL_ERROR \"Failed to checkout tag: '${tag}'\")
endif()

execute_process(
  COMMAND \"${GIT_EXECUTABLE}\" submodule init
  WORKING_DIRECTORY \"${PROJECT_BINARY_DIR}/skeleton\"
  RESULT_VARIABLE error_code)
if(error_code)
  message(FATAL_ERROR \"Failed to init submodules in: '${PROJECT_BINARY}/skeleton'\")
endif()

execute_process(
  COMMAND \"${GIT_EXECUTABLE}\" submodule update --recursive
  WORKING_DIRECTORY \"${PROJECT_BINARY_DIR}/skeleton\"
  RESULT_VARIABLE error_code
  )
if(error_code)
  message(FATAL_ERROR \"Failed to update submodules in: '${PROJECT_BINARY_DIR}/skeleton'\")
endif()"
)

# Add a custom command to create the library build folders
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/skeleton-mkdir
  COMMENT "Making 'skeleton' build directories"
  COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/debug-shared
  COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/debug-static
  COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/release-shared
  COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/release-static
  COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/skeleton-mkdir
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  VERBATIM)

# Add a custom command to download the GIT repository
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/skeleton-download
  COMMAND ${CMAKE_COMMAND} -P ${PROJECT_BINARY_DIR}/skeleton-gitclone.cmake
  COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/skeleton-download
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-mkdir
  VERBATIM)

# Build a debug build of the shared libraries
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/skeleton-debug-shared
  COMMENT "Configuring 'skeleton' for shared debug libraries"
  COMMAND ${CMAKE_COMMAND} ${GET_skeleton_DEBUG_SHARED}
  COMMAND ${CMAKE_COMMAND} ${BUILD_skeleton_DEBUG_SHARED} --target install
  COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/skeleton-debug-shared
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/debug-shared
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-mkdir
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-download
  VERBATIM)

# Build a debug build of the static libraries
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/skeleton-debug-static
  COMMENT "Configuring 'skeleton' for static debug libraries"
  COMMAND ${CMAKE_COMMAND} ${GET_skeleton_DEBUG_STATIC}
  COMMAND ${CMAKE_COMMAND} ${BUILD_skeleton_DEBUG_STATIC} --target install
  COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/skeleton-debug-static
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/debug-static
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-mkdir
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-download
  VERBATIM)

# Build a release build of the shared libraries
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/skeleton-release-shared
  COMMENT "Configuring 'skeleton' for shared release libraries"
  COMMAND ${CMAKE_COMMAND} ${GET_skeleton_RELEASE_SHARED}
  COMMAND ${CMAKE_COMMAND} ${BUILD_skeleton_RELEASE_SHARED} --target install
  COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/skeleton-release-shared
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/release-shared
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-mkdir
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-download
  VERBATIM)

# Build a release build of the static libraries and the skeleton documentation
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/skeleton-release-static
  COMMENT "Configuring 'skeleton' for static release libraries"
  COMMAND ${CMAKE_COMMAND} ${GET_skeleton_RELEASE_STATIC}
  COMMAND ${CMAKE_COMMAND} ${BUILD_skeleton_RELEASE_STATIC} --target install
  COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/skeleton-release-static
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/release-static
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-mkdir
  DEPENDS ${PROJECT_BINARY_DIR}/skeleton-download
  VERBATIM)

# Install the compiled libraries, binary files, include files, and documents
# to the correct folders for GQE to find them.
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/skeleton-install
  COMMENT "Installing 'skeleton' external library into project root"
  COMMAND ${CMAKE_COMMAND} ${COPY_BIN}
  COMMAND ${CMAKE_COMMAND} ${COPY_LIB}
  COMMAND ${CMAKE_COMMAND} ${COPY_INCLUDE}
  COMMAND ${CMAKE_COMMAND} ${COPY_DOC}
  COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/skeleton-install
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  DEPENDS ${GET_skeleton_BUILD_DEPS}
  VERBATIM)

