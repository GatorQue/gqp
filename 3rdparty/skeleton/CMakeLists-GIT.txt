# Filename: CMakeLists.txt
# Description: This will build four versions of the SFML project for each
#   library type you may use (Release, Debug) and (Shared, Static).
# Modification Log:
# 2012-01-03 Initial version
# 2012-02-11 Add cmake module path to configure step. Also change install path
#   to a directory to prevent any future copy issues.
#

# Define the SFML project
project(${EXTERNAL_CMAKE_DIR})

# Define CMake arguments for configuring both versions
set(CONFIG_SFML_DEBUG
  -DBUILD_DOC:BOOL=FALSE
  -DBUILD_EXAMPLES:BOOL=${SFML_BUILD_EXAMPLES}
  -DBUILD_SHARED_LIBS:BOOL=${SFML_SHARED_LIBRARIES}
  -DCMAKE_BUILD_TYPE:STRING=Debug
  -DCMAKE_MODULE_PATH:PATH=${EXTERNAL_MODULES_DIR}
  -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/install
  -G${CMAKE_GENERATOR}
  ${PROJECT_BINARY_DIR}/clone)
set(CONFIG_SFML_RELEASE
  -DBUILD_DOC:BOOL=${SFML_BUILD_DOCS}
  -DBUILD_EXAMPLES:BOOL=${SFML_BUILD_EXAMPLES}
  -DBUILD_SHARED_LIBS:BOOL=${SFML_SHARED_LIBRARIES}
  -DCMAKE_BUILD_TYPE:STRING=Release
  -DCMAKE_MODULE_PATH:PATH=${EXTERNAL_MODULES_DIR}
  -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/install
  -G${CMAKE_GENERATOR}
  ${PROJECT_BINARY_DIR}/clone)

# Define CMake arguments for building both versions
set(BUILD_SFML_DEBUG
  --build ${PROJECT_BINARY_DIR}/debug
  --config ${CMAKE_CFG_INTDIR})
set(BUILD_SFML_RELEASE
  --build ${PROJECT_BINARY_DIR}/release
  --config ${CMAKE_CFG_INTDIR})

# Define CMake arguments for copying build results to central directory
set(COPY_BIN
  -E copy_directory
  ${PROJECT_BINARY_DIR}/install/bin
  ${EXTERNAL_BIN_DIR})
set(COPY_LIB
  -E copy_directory
  ${PROJECT_BINARY_DIR}/install/lib
  ${EXTERNAL_LIB_DIR})
set(COPY_INCLUDE
  -E copy_directory
  ${PROJECT_BINARY_DIR}/install/include
  ${EXTERNAL_INCLUDE_DIR})
set(COPY_DOC
  -E copy_directory
  ${PROJECT_BINARY_DIR}/install/doc/html
  ${EXTERNAL_DOC_DIR}/${PROJECT_NAME})
set(COPY_CMAKE
  -E copy_directory
  ${PROJECT_BINARY_DIR}/install/cmake/Modules
  ${EXTERNAL_MODULES_DIR})
set(COPY_EXAMPLES
  -E copy_directory
  ${PROJECT_BINARY_DIR}/install/examples
  ${EXTERNAL_EXAMPLES_DIR}/${PROJECT_NAME})
set(COPY_LICENSE
  -E copy
  ${PROJECT_BINARY_DIR}/install/license.txt
  ${EXTERNAL_LICENSE_DIR}/${PROJECT_NAME}-license.txt)

# Add custom target for this 3rdparty/external library
add_custom_target(${PROJECT_NAME}
  DEPENDS ${TOUCH_DIR}/${PROJECT_NAME}-complete)

# Add the complete step first that depends on all the other steps
add_custom_command(
  OUTPUT ${TOUCH_DIR}/${PROJECT_NAME}-complete
  COMMENT "Completed getting, building, and installing '${PROJECT_NAME}'"
  COMMAND ${CMAKE_COMMAND} -E touch ${TOUCH_DIR}/${PROJECT_NAME}-complete
  DEPENDS ${PROJECT_BINARY_DIR}/clone
  DEPENDS ${PROJECT_BINARY_DIR}/debug
  DEPENDS ${PROJECT_BINARY_DIR}/release
  DEPENDS ${TOUCH_DIR}/${PROJECT_NAME}-debug
  DEPENDS ${TOUCH_DIR}/${PROJECT_NAME}-release
  DEPENDS ${TOUCH_DIR}/${PROJECT_NAME}-install
  VERBATIM)

# Grab the correct 'sfml-get' custom command based on version desired
if(SFML_USE_LATEST)
  # Create Script to clone SFML library
  ScriptCloneGit(${PROJECT_BINARY_DIR}/clone.cmake
    ${SFML_URL}
    ${PROJECT_BINARY_DIR}/clone
    ${SFML_REVISION_TAG})

  # Add a custom command to clone the GIT repository
  add_custom_command(
    OUTPUT ${PROJECT_BINARY_DIR}/clone
    COMMAND ${CMAKE_COMMAND} -P ${PROJECT_BINARY_DIR}/clone.cmake
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${PROJECT_BINARY_DIR}/debug
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${PROJECT_BINARY_DIR}/release
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    VERBATIM)
else(SFML_USE_LATEST)
  # Create Script to download older SFML version source files
  ScriptDownloadFile(${PROJECT_BINARY_DIR}/download.cmake
    ${SFML_URL}
    ${PROJECT_BINARY_DIR}/sfml.zip
    30)

  # Create Script to extract older SFML version source files
  ScriptExtractFile(${PROJECT_BINARY_DIR}/extract.cmake
    ${PROJECT_BINARY_DIR}/sfml.zip
    ${PROJECT_BINARY_DIR}/clone)

  # Add a custom command to download and extract older SFML version
  add_custom_command(
    OUTPUT ${PROJECT_BINARY_DIR}/clone
    COMMAND ${CMAKE_COMMAND} -P ${PROJECT_BINARY_DIR}/download.cmake
    COMMAND ${CMAKE_COMMAND} -P ${PROJECT_BINARY_DIR}/extract.cmake
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${PROJECT_BINARY_DIR}/debug
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${PROJECT_BINARY_DIR}/release
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    VERBATIM)
endif(SFML_USE_LATEST)

# Add a custom command to create the debug library build folder
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/debug
  COMMENT "Making '${PROJECT_NAME}' debug build directory"
  COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/debug
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  DEPENDS ${PROJECT_BINARY_DIR}/clone
  VERBATIM)

# Build a debug build of the library
add_custom_command(
  OUTPUT ${TOUCH_DIR}/${PROJECT_NAME}-debug
  COMMENT "Configuring '${PROJECT_NAME}' for debug libraries"
  COMMAND ${CMAKE_COMMAND} ${CONFIG_SFML_DEBUG}
  COMMAND ${CMAKE_COMMAND} ${BUILD_SFML_DEBUG} --target install
  COMMAND ${CMAKE_COMMAND} -E touch ${TOUCH_DIR}/${PROJECT_NAME}-debug
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/debug
  DEPENDS ${PROJECT_BINARY_DIR}/clone
  DEPENDS ${PROJECT_BINARY_DIR}/debug
  VERBATIM)

# Add a custom command to create the release library build folder
add_custom_command(
  OUTPUT ${PROJECT_BINARY_DIR}/release
  COMMENT "Making '${PROJECT_NAME}' release build directory"
  COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/release
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  DEPENDS ${PROJECT_BINARY_DIR}/clone
  VERBATIM)

# Build a release build of the library
if(SFML_BUILD_DOCS)
  add_custom_command(
    OUTPUT ${TOUCH_DIR}/${PROJECT_NAME}-release
    COMMENT "Configuring '${PROJECT_NAME}' for release libraries"
    COMMAND ${CMAKE_COMMAND} ${CONFIG_SFML_RELEASE}
    COMMAND ${CMAKE_COMMAND} ${BUILD_SFML_RELEASE} --target doc
    COMMAND ${CMAKE_COMMAND} ${BUILD_SFML_RELEASE} --target install
    COMMAND ${CMAKE_COMMAND} -E touch ${TOUCH_DIR}/${PROJECT_NAME}-release
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/release
    DEPENDS ${PROJECT_BINARY_DIR}/clone
    DEPENDS ${PROJECT_BINARY_DIR}/release
    VERBATIM)
else(SFML_BUILD_DOCS)
  add_custom_command(
    OUTPUT ${TOUCH_DIR}/${PROJECT_NAME}-release
    COMMENT "Configuring '${PROJECT_NAME}' for release libraries"
    COMMAND ${CMAKE_COMMAND} ${CONFIG_SFML_RELEASE}
    COMMAND ${CMAKE_COMMAND} ${BUILD_SFML_RELEASE} --target install
    COMMAND ${CMAKE_COMMAND} -E touch ${TOUCH_DIR}/${PROJECT_NAME}-release
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/release
    DEPENDS ${PROJECT_BINARY_DIR}/clone
    DEPENDS ${PROJECT_BINARY_DIR}/release
    VERBATIM)
endif(SFML_BUILD_DOCS)

# Install the compiled libraries, binary files, include files, and documents
# to the correct folders for GQE to find them.
add_custom_command(
  OUTPUT ${TOUCH_DIR}/${PROJECT_NAME}-install
  COMMENT "Installing '${PROJECT_NAME}' libraries into '${EXTERNAL_DIR}'"
  COMMAND ${CMAKE_COMMAND} ${COPY_BIN}
  COMMAND ${CMAKE_COMMAND} ${COPY_LIB}
  COMMAND ${CMAKE_COMMAND} ${COPY_INCLUDE}
  COMMAND ${CMAKE_COMMAND} ${COPY_DOC}
  COMMAND ${CMAKE_COMMAND} ${COPY_CMAKE}
  COMMAND ${CMAKE_COMMAND} ${COPY_EXAMPLES}
  COMMAND ${CMAKE_COMMAND} ${COPY_LICENSE}
  COMMAND ${CMAKE_COMMAND} -E touch ${TOUCH_DIR}/${PROJECT_NAME}-install
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  DEPENDS ${PROJECT_BINARY_DIR}/clone
  DEPENDS ${PROJECT_BINARY_DIR}/debug
  DEPENDS ${PROJECT_BINARY_DIR}/release
  DEPENDS ${TOUCH_DIR}/${PROJECT_NAME}-debug
  DEPENDS ${TOUCH_DIR}/${PROJECT_NAME}-release
  VERBATIM)

