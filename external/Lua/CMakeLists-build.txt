# Filename: CMakeLists.txt
# Description: CMake top level project file for building this external library.
# Modification Log:
# 2012-05-25 Initial version
#

# We require no less than version 2.8 for CMake
cmake_minimum_required(VERSION 2.8)

# Set our project name as TopLevel
project(Lua)

# Set default build type first before calling project() instruction
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build (Debug or Release)" FORCE)
endif(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)

# Include the top level macros to be used by all projects
#include(${PROJECT_SOURCE_DIR}/cmake/Macros.cmake)

# Include the top level functions to be used by all projects
#include(${PROJECT_SOURCE_DIR}/cmake/Functions.cmake)

# Include the top level options to be used by all projects
#include(${PROJECT_SOURCE_DIR}/cmake/Options.cmake)

# Add the external/3rd party directory first
#add_subdirectory(external)

# Add the projects folder next
#add_subdirectory(projects)

# Set target name
set(target lua)

# Set target version information
set(${target}_VERSION_MAJOR 5)
set(${target}_VERSION_MINOR 2)
set(${target}_VERSION_PATCH 2)

# public header include file
set(MAIN_HEADER src/lua.h)

# lua include files
set(LIB_INC
    src/lua.hpp
    src/luaconf.h
	src/lualib.h
    src/lapi.h
	src/lcode.h
    src/lctype.h
	src/ldebug.h
	src/ldo.h
	src/lfunc.h
	src/lgc.h
	src/llex.h
    src/lmem.h
	src/lobject.h
	src/lopcodes.h
	src/lparser.h
	src/lstate.h
	src/lstring.h
	src/ltable.c
	src/ltm.h
	src/lundump.h
	src/lvm.h
	src/lzio.h
	src/lauxlib.h
	src/llimits.h
	src/ltable.h)

# lua source files
set(LIB_SRC
    src/lapi.c
	src/lcode.c
	src/lctype.c
	src/ldebug.c
	src/ldo.c
	src/ldump.c
	src/lfunc.c
	src/lgc.c
	src/llex.c
	src/lmem.c
	src/lobject.c
	src/lopcodes.c
	src/lparser.c
	src/lstate.c
	src/lstring.c
	src/ltable.c
	src/ltm.c
	src/lundump.c
	src/lvm.c
	src/lzio.c
	src/lauxlib.c
	src/lbaselib.c
	src/lbitlib.c
	src/lcorolib.c
	src/ldblib.c
	src/liolib.c
	src/lmathlib.c
	src/loslib.c
	src/lstrlib.c
	src/ltablib.c
	src/loadlib.c
	src/linit.c)

# Add the lua library
add_library(${target} ${MAIN_HEADER} ${LIB_INC} ${LIB_SRC})

# Adjust the output file prefix/suffix to match our conventions
if(BUILD_SHARED_LIBS)
  if(WINDOWS)
    # Include the major version number in Windows shared library names
    # (but not import library names)
    set_target_properties(${target} PROPERTIES DEBUG_POSTFIX -d)
    set_target_properties(${target} PROPERTIES SUFFIX
        "-${${target}_VERSION_MAJOR}_${${target}_VERSION_MINOR}${CMAKE_SHARED_LIBRARY_SUFFIX}")
  else(WINDOWS)
    set_target_properties(${target} PROPERTIES DEBUG_POSTFIX -d)
  endif(WINDOWS)
  if(WINDOWS AND COMPILER_GCC)
    # On Windows/gcc get rid of "lib" prefix for shared libraries,
    # and transform the ".dll.a" suffix into ".a" for import libraries
    set_target_properties(${target} PROPERTIES PREFIX "")
    set_target_properties(${target} PROPERTIES IMPORT_SUFFIX ".a")
  endif(WINDOWS AND COMPILER_GCC)
  set_target_properties (${target} PROPERTIES COMPILE_DEFINITIONS "LUA_BUILD_AS_DLL")
else(BUILD_SHARED_LIBS)
  set_target_properties(${target} PROPERTIES DEBUG_POSTFIX -s-d)
  set_target_properties(${target} PROPERTIES RELEASE_POSTFIX -s)
endif(BUILD_SHARED_LIBS)

# Set target public header file for this library
set_target_properties(${target} PROPERTIES PUBLIC_HEADER "${MAIN_HEADER}")

# Set target version properties for this library
set_target_properties(${target} PROPERTIES SOVERSION ${${target}_VERSION_MAJOR}.${${target}_VERSION_MINOR})
set_target_properties(${target} PROPERTIES VERSION ${${target}_VERSION_MAJOR}.${${target}_VERSION_MINOR})
  
# for gcc 4.x on Windows, apply the BUILD_STATIC_STD_LIBS option if it is enabled
if(WINDOWS AND COMPILER_GCC AND BUILD_STATIC_STD_LIBS)
  if(${GCC_VERSION} MATCHES "4\\..*")
    set_target_properties(${target} PROPERTIES LINK_FLAGS "-static-libgcc -static-libstdc++")
  endif(${GCC_VERSION} MATCHES "4\\..*")
endif(WINDOWS AND COMPILER_GCC AND BUILD_STATIC_STD_LIBS)

# Interpreter source files
set(INTERPRETER_SRC src/lua.c)

# Compiler source files
set(COMPILER_SRC src/luac.c)

# Add interpreter target
add_executable(luai ${INTERPRETER_SRC})

# set the debug suffix
set_target_properties(luai PROPERTIES DEBUG_POSTFIX -d)

# for gcc 4.x on Windows, apply the BUILD_STATIC_STD_LIBS option if it is enabled
if(WINDOWS AND COMPILER_GCC AND BUILD_STATIC_STD_LIBS)
    if(${GCC_VERSION} MATCHES "4\\..*")
        set_target_properties(luai PROPERTIES LINK_FLAGS "-static-libgcc -static-libstdc++")
    endif()
endif()

# link the target to its GQE dependencies
target_link_libraries(luai lua)

# Add compiler target
add_executable(luac ${LIB_SRC} ${COMPILER_SRC})

# set the debug suffix
set_target_properties(luac PROPERTIES DEBUG_POSTFIX -d)

# for gcc 4.x on Windows, apply the BUILD_STATIC_STD_LIBS option if it is enabled
if(WINDOWS AND COMPILER_GCC AND BUILD_STATIC_STD_LIBS)
    if(${GCC_VERSION} MATCHES "4\\..*")
        set_target_properties(luac PROPERTIES LINK_FLAGS "-static-libgcc -static-libstdc++")
    endif()
endif()

# link the target to its GQE dependencies
target_link_libraries(luac)

# add the install rule for this library
install(TARGETS ${target} luai luac
        PUBLIC_HEADER DESTINATION include/${target} COMPONENT devel
        RUNTIME DESTINATION bin COMPONENT bin
        LIBRARY DESTINATION lib COMPONENT shlib
        ARCHIVE DESTINATION lib COMPONENT devel)

# add the install rule for the include files for this library
install(FILES ${LIB_INC}
        DESTINATION include/${target}
        COMPONENT devel)

# add the install rule for the documentation
install(DIRECTORY ${PROJECT_SOURCE_DIR}/doc/
        DESTINATION doc
        COMPONENT devel)
